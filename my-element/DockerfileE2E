


# # Using Ubuntu
# curl -sL https://deb.nodesource.com/setup_14.x | sudo -E bash -
# sudo apt-get install -y nodejs

# # Using Debian, as root
# curl -sL https://deb.nodesource.com/setup_14.x | bash -
# apt-get install -y nodejs



FROM debian:stable-slim

RUN apt-get update
RUN apt-get install -yy wget curl gnupg
RUN curl -sL https://deb.nodesource.com/setup_14.x | bash - && \
	apt-get update && apt-get install -y nodejs && \
  npm i -g npm

RUN node -v && npm -v

RUN wget -q -O - https://dl-ssl.google.com/linux/linux_signing_key.pub | apt-key add - && \
  echo "deb http://dl.google.com/linux/chrome/deb/ stable main" > /etc/apt/sources.list.d/google.list && \
  apt-get update && \
  apt-get install -y google-chrome-stable xvfb
RUN npm -v
RUN apt update && apt install -y procps
RUN apt clean
RUN rm -rf /var/lib/apt/lists/*

# # base image
# FROM node:12.16.1-alpine As builder



# # install chrome for protractor tests
# # We need wget to set up the PPA and xvfb to have a virtual screen and unzip to install the Chromedriver
# RUN wget -q -O - https://dl-ssl.google.com/linux/linux_signing_key.pub | apt-key add -
# RUN sh -c 'echo "deb [arch=amd64] http://dl.google.com/linux/chrome/deb/ stable main" >> /etc/apt/sources.list.d/google.list'
# RUN apt-get update && apt-get install -yq google-chrome-stable


# # Clean clears out the local repository of retrieved package files. Run apt-get clean from time to time to free up disk space.
# RUN apt-get clean && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*

# create and set working directory. This WORKDIR command will create the working directory in our docker image. 
# going forward any command will be run in the context of this directory.
RUN mkdir -p /app
WORKDIR /app

# add `/app/node_modules/.bin` to $PATH
ENV PATH /app/node_modules/.bin:$PATH

# install and cache app dependencies
COPY package.json package-lock.json ./

#This RUN command will restore node_modules define in our package.json
RUN npm install
RUN npm install -g @angular/cli@10.1.6


# This COPY command copies all the files from our current directory to the container working directory. 
# this will copy all our source files.
COPY . /app

# run tests
RUN ng test --watch=false
RUN ng e2e

# generate build
RUN ng build --output-path=dist
#This command will build our angular project in production mode and create production ready files
# in dist/ folder.
RUN npm run build --prod

CMD ng serve --host 0.0.0.0